{"version":3,"sources":["App.js","index.js"],"names":["getFormattedTime","sec","hh","Math","floor","slice","remainderM","mm","ss","App","startBtn","React","useRef","pauseBtn","stopBtn","resetBtn","useState","counter","setCounter","isCounting","setIsCounting","useEffect","start$","fromEvent","current","pipe","mapTo","newIsCounting","stop$","newCounter","pause$","throttle","_","interval","reset$","merge","startWith","scan","state","curr","tap","switchMap","NEVER","subscribe","className","classNames","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+WAMMA,EAAmB,SAACC,GACxB,IAAMC,GAAM,IAAMC,KAAKC,MAAMH,EAAM,OAAOI,OAAO,GAC3CC,EAAaL,EAAM,KAEnBM,GAAM,IAAMJ,KAAKC,MAAME,EAAa,KAAKD,OAAO,GAGhDG,GAAM,IAFOF,EAAa,IAEFD,OAAO,GAErC,MAAM,GAAN,OAAUH,EAAV,YAAgBK,EAAhB,YAAsBC,IA2DTC,EAxDH,WACV,IAAMC,EAAWC,IAAMC,OAAO,MACxBC,EAAWF,IAAMC,OAAO,MACxBE,EAAUH,IAAMC,OAAO,MACvBG,EAAWJ,IAAMC,OAAO,MAJd,EAMcI,mBAAS,GANvB,mBAMTC,EANS,KAMAC,EANA,OAOoBF,oBAAS,GAP7B,mBAOTG,EAPS,KAOGC,EAPH,KA0ChB,OAjCAC,qBAAU,WAER,IAAMC,EAASC,YAAUb,EAASc,QAAS,SAASC,KAAKC,YAAM,CAAEC,eAAe,KAC1EC,EAAQL,YAAUT,EAAQU,QAAS,SAASC,KAAKC,YAAM,CAAEC,eAAe,EAAOE,WAAY,KAC3FC,EAASP,YAAUV,EAASW,QAAS,YAAYC,KACrDM,aAAS,SAACC,GAAD,OAAOC,YAAS,QACzBP,YAAM,CAAEC,eAAe,KAEnBO,EAASX,YAAUR,EAASS,QAAS,SAASC,KAAKC,YAAM,CAAEC,eAAe,EAAME,WAAY,KAsBlG,OApBeM,YAAMb,EAAQM,EAAOE,EAAQI,GAC3CT,KACCW,YAAU,CACRT,eAAe,EACfE,WAAY,IAEdQ,aAAK,SAACC,EAAOC,GAAR,mBAAC,eAAsBD,GAAUC,KAAS,IAC/CC,aAAI,SAACF,GAAYpB,EAAWoB,EAAMT,YAAaT,EAAckB,EAAMX,kBACnEc,aAAU,SAACH,GAAD,OAAYA,EAAMX,cACxBM,YAAS,KAAMR,KACfe,aACE,SAACR,GAA4B,OAApBM,EAAMT,aAAqB,KAEtCW,aAAI,SAACR,GAAD,OAAOd,EAAWoB,EAAMT,gBAE5Ba,QAGCC,YAEA,eACN,IAID,sBAAKC,UAAU,YAAf,UACE,+BAAQ5C,EAAiBiB,KACzB,sBAAK2B,UAAU,gBAAf,UACE,wBAAQA,UAAYC,IAAW,wBAAyB1B,GAAc,UAAY2B,IAAMpC,EAAxF,mBACA,wBAAQkC,UAAYC,IAAW,yBAA0B1B,GAAc,UAAY2B,IAAMhC,EAAzF,kBACA,wBAAQ8B,UAAU,wBAAwBE,IAAMjC,EAAhD,kBACA,wBAAQ+B,UAAU,wBAAwBE,IAAM/B,EAAhD,0BC/DRgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.73a0d9fd.chunk.js","sourcesContent":["import React,{ useState, useEffect }  from 'react'\r\nimport { interval, fromEvent, merge, NEVER  } from 'rxjs';\r\nimport { switchMap, scan, tap, startWith, mapTo, throttle } from 'rxjs/operators';\r\nimport classNames from 'classnames'\r\nimport './App.css';\r\n\r\nconst getFormattedTime = (sec) => {\r\n  const hh = ('0' + Math.floor(sec / 3600)).slice(-2)\r\n  const remainderM = sec % 3600\r\n\r\n  const mm = ('0' + Math.floor(remainderM / 60)).slice(-2)\r\n  const remainderS = remainderM % 60\r\n\r\n  const ss = ('0' + remainderS).slice(-2)\r\n\r\n  return `${hh}:${mm}:${ss}`\r\n}\r\n\r\nconst App = () => {\r\n  const startBtn = React.useRef(null);\r\n  const pauseBtn = React.useRef(null);\r\n  const stopBtn = React.useRef(null);\r\n  const resetBtn = React.useRef(null);\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [isCounting, setIsCounting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Refactoring. Need to think about events and refs. Maybe we could do it in another way?\r\n    const start$ = fromEvent(startBtn.current, 'click').pipe(mapTo({ newIsCounting: true }))\r\n    const stop$ = fromEvent(stopBtn.current, 'click').pipe(mapTo({ newIsCounting: false, newCounter: 0 }))\r\n    const pause$ = fromEvent(pauseBtn.current, 'dblclick').pipe(\r\n      throttle((_) => interval(300)),\r\n      mapTo({ newIsCounting: false })\r\n    )\r\n    const reset$ = fromEvent(resetBtn.current, 'click').pipe(mapTo({ newIsCounting: true, newCounter: 0 }))\r\n\r\n    const timer$ = merge(start$, stop$, pause$, reset$)\r\n    .pipe(\r\n      startWith({\r\n        newIsCounting: false,\r\n        newCounter: 0\r\n      }),\r\n      scan((state, curr) => ({ ...state, ...curr }), {}),\r\n      tap((state) => { setCounter(state.newCounter); setIsCounting(state.newIsCounting) }),\r\n      switchMap((state) =>  state.newIsCounting\r\n        ? interval(1000).pipe(\r\n          tap(\r\n            (_) => { state.newCounter++; return 1 }\r\n          ),\r\n          tap((_) => setCounter(state.newCounter))\r\n        )\r\n        : NEVER\r\n      )\r\n    )\r\n    timer$.subscribe()\r\n\r\n    return () => {  }\r\n  }, []);\r\n\r\n  return (\r\n    \r\n    <div className=\"stopwatch\">\r\n      <span>{ getFormattedTime(counter) }</span>\r\n      <div className=\"control-panel\">\r\n        <button className={ classNames('control-panel__button', isCounting && 'hidden') } ref={ startBtn }>Start</button>\r\n        <button className={ classNames('control-panel__button', !isCounting && 'hidden') } ref={ stopBtn }>Stop</button>\r\n        <button className=\"control-panel__button\" ref={ pauseBtn }>Wait</button>\r\n        <button className=\"control-panel__button\" ref={ resetBtn }>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}